# Name: BaSimPL_Parser
# Description: This file holds the classes and functions which help in parsing the 'Basic Simple Programming Language'
#              (BaSimPL) using the tokens generated by the Lexxer of BaSimPL.
# References: http://jayconrod.com/posts/37/a-simple-interpreter-from-scratch-in-python-part-1
#             https://ruslanspivak.com/lsbasi-part1/


import BaSimPL_Lexxer as Lex

#####################################################################################################################
#               GRAMMAR OF BaSimPL                                                                                  #
#####################################################################################################################

# SEQSTATEMENTS -> STATEMENT {STATEMENT}
# STATEMENT -> simpleSTATEMENT | compoundSTATEMENT
# simpleSTATEMENT -> assignmentSTATEMENT | procedureSTATEMENT
# compoundSTATEMENT -> ifSTATEMENT | whileSTATEMENT
# assignmentSTATEMENT -> ID ASSIGNT_OPERATOR expression SEMI_COLON
# ifSTATEMENT -> IF OPEN_BRACE expression CLOSE_BRACE SEG_OPEN SEQSTATEMENTS SEG_CLOSE {ELSE SEG_OPEN SEQSTATEMENTS SEG_CLOSE}
# whileSTATEMENT -> WHILE OPEN_BRACE expression CLOSE_BRACE SEG_OPEN SEQSTATEMENTS SEG_CLOSE
# expression -> relation {AND_OPR relation} | {OR_OPR relation}
# relation -> simpleExpression { relationalOperator simpleExpression}
# simpleExpression -> term { ADDSUB_OPERATOR term}
# term -> factor { MULDIV_OPERATOR factor}
# factor -> OPEN_BRACE simpleExpression CLOSE_BRACE | ID | INT
# ADDSUB_OPEATOR -> ADD_OPERATOR | SUB_OPERATOR
# MULDIV_OPERATOR -> MUL_OPERATOR | DIV_OPERATOR
# relationalOperator ->  EQUALS | GREATER | LESSER | GREATEREQUAL | LESSEREQUAL | NOTEQUAL
# INT -> [0-9]{[0-9]}
# ID -> [a-zA-Z]{[a-zA-Z0-9_]}
# OPEN_BRACE -> "("
# CLOSE_BRACE -> ")"
# SEG_OPEN -> "{"
# SEG_CLOSE -> "}"
# IF -> "if"
# ELSE -> "else"
# WHILE -> "while"
# ADD_OPERATOR -> "+"
# SUB_OPERATOR -> "-"
# MUL_OPERATOR -> "*"
# DIV_OPERATOR -> "/"
# ASSIGNT_OPERATOR -> "=="
# EQUALS -> "="
# SEMI_COLON -> ";"
# IN_MODE -> "in"
# OUT_MODE -> "out"

#####################################################################################################################
#####################################################################################################################

# Name: Parser
# Description: This class is responsible for the semantic & syntactic analysis of the 'Basic Simple Programming Language'
#              This is a recursive descent parsing
class Parser(object):





